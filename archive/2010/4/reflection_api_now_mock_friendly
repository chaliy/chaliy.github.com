<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>  
	<title>Mike Chaliy: Mock friendly System.Reflection API, positive changes in .NET 4.0</title>
	<meta name="description" content="Overview of the mocking in System.Reflection API. Some good changes in .NET 4.0" />
	<meta name="keywords" content="F#, System.Reflcetion, .NET 4.0, Assembly, Type, ProeprtyInfo, .NET" />

	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
	<meta name="Geography" content="Kyiv, Ukraine">
	<meta name="City" content="Kyiv">
	<meta name="Country" content="Ukraine">
	<meta name="Language" content="English">
	<meta name="Author" content="Mike Chaliy" />
	<link href="/stylesheets/style.css?1279376199" media="all" rel="stylesheet" type="text/css" />
	<link href="/stylesheets/print.css?1254176669" media="print" rel="stylesheet" type="text/css" />	
	<link rel="alternate" type="application/atom+xml" title="Mike Chaliy, Blog" href="http://feeds.feedburner.com/chaliy" />
</head>
<body>
        
	        <div id="menu">
            <ul>
            	<li><a href="/">Home</a></li>
                <li><a href="http://blog.chaliy.name">Blog</a></li>
				
				<li><a href="/home/contacts">Contacts</a></li>
            </ul>
        </div>
		
        <div id="header">
        	<p>Mike Chaliy's Personal Site</p>
			<a class="rss" type="application/atom+xml" title="Mike Chaliy, Blog" href="http://feeds.feedburner.com/chaliy" >My RSS Feed.</a>	
		</div>
	       	    	       
	
		
	<div id="main">
                
		<h1>Mock friendly System.Reflection API, positive changes in .NET 4.0</h1>
<div class="entry">	
	<p><img src='http://chaliy.name/files/reflection_api_now_mock_friendly/reflection_api_block.jpg' alt='Do not worry if this break does not look like an Reflection API' /></p>

<p>While testing my <a href='http://github.com/chaliy/db_move_forward'>db_move_forward</a> I realized that now you can completely mock <a href='http://msdn.microsoft.com/en-us/library/system.reflection.assembly.aspx'><code>Assembly</code></a> class. Starting from .NET 4.0 most of the stuff is protected and virtual! For example, code below will create assembly representation with types supplied in argument <code>tt</code>. But as you may expect you can override virtually everything else. For example, assembly level attributes, resources, referenced assemblies. You name them :).</p>

<pre><code>let createAssembly (tt : Type seq) =
    { new Assembly() with
          override x.GetTypes() = tt |&gt; Seq.toArray }</code></pre>

<p>And C# version is:</p>

<pre><code>public class SuperAssembly {
	private readonly Type[] _types;
	public override Type[] GetTypes(){
		return _types;
	}
}</code></pre>

<p>Nice feature if you have to test stuff that needs some specific assembly configuration. Isn&#8217;t it? Of course, <code>Assembly</code> is not the only member of Reflection API. Next candidate to be mocked is <a href='http://msdn.microsoft.com/en-us/library/system.type.aspx'><code>Type</code></a> class. Well, nothing new here. But do not worry. Actually, <code>Type</code> class was extensible before .NET 4.0. I found <code>TypeDelegator</code> class to be the best for mocking. It implements all stuff by default. Code bellow is example of custom &#8216;Type&#8217; implementation that overrides Name property.</p>

<pre><code>let createType name =
	{ new TypeDelegator(typeof&lt;string&gt;) with
        override x.Name = name } :&gt; Type</code></pre>

<p>Next candidate is <a href='http://msdn.microsoft.com/en-us/library/system.reflection.memberinfo.aspx'><code>MemberInfo</code></a> and Co. Actually, situation is the same as with <code>Type</code>. Code bellow mocks <code>PropertyInfo</code> class:</p>

<pre><code>let createProperty n v =
	{ new PropertyInfo() with
			override x.Name = n
			member x.GetAccessors(b) = [||]
			member x.GetGetMethod(b) = failwith &quot;Not implemented&quot;
			member x.GetIndexParameters() = [||]
			member x.GetSetMethod(b) = failwith &quot;Not implemented&quot;
			member x.GetValue(o, f, b, i, c) = v
			member x.SetValue(o, v, f, b, i, c) = ()
			member x.Attributes = PropertyAttributes.None
			member x.CanRead = true
			member x.CanWrite = false
			member x.PropertyType = v.GetType()
			member x.DeclaringType = typeof&lt;string&gt;
			member x.ReflectedType = typeof&lt;string&gt;
			member x.GetCustomAttributes(b) = [||]
			member x.GetCustomAttributes(t, b) = [||]
			member x.IsDefined(t, b) = false }</code></pre>

<p>As for me it less usable&#8230; bull well, this is better than nothing :).</p>

<p>Enjoy.</p>

<p>P.S. What do you think about F# examples? Actual code has been written with F#, but I am concerned about readability or even more understability. Let me know.</p>
	<p class="entry-info">This entry was posted on 2010-04-05T19:01:00+00:00. <a href="http://chaliy.name/blog/2010/4/reflection_api_now_mock_friendly">Permalink</a></p>
</div>
<div id="disqus_thread"></div>
<script type="text/javascript" src="http://disqus.com/forums/mikechaliy/embed.js"></script>
<noscript><a href="http://mikechaliy.disqus.com/?url=ref">View the discussion thread.</a></noscript>
		
	</div>
		
    	<div id="footer">        
       	Mike Chaliy &copy; Copyright 2009 
		&nbsp;|&nbsp;
		<a href="http://www.developers.org.ua" >
			<img width="80" height="15" border="0" alt="Участник планеты Developers.org.ua" src="http://www.developers.org.ua/static/images/planet/80x15_green.gif" />
		</a>
		&nbsp;|&nbsp;			
		<a rel="license" href="http://creativecommons.org/licenses/by/3.0/">
			<img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by/3.0/80x15.png" /></a><br />
			This <span xmlns:dc="http://purl.org/dc/elements/1.1/" href="http://purl.org/dc/dcmitype/Text" rel="dc:type">work</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://chaliy.name" property="cc:attributionName" rel="cc:attributionURL">Mike Chaliy</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 Unported License</a>.
    </div>
	<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-265957-3");
pageTracker._trackPageview();
} catch(err) {}</script>
</body>
</html>
